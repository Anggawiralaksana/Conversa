plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0'
    id 'androidx.navigation.safeargs'
    id 'maven-publish'
    id 'com.google.gms.google-services'
}


android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"


    defaultConfig {
        minSdkVersion 20
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled = true
        signingConfig signingConfigs.debug
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField "String", 'CONVERSA_API_BASE_URL', '"http://localhost:5007/"'
            buildConfigField "String", 'CHATBOT_BACKEND_HOST', '"http://localhost:5007/"'
            buildConfigField "String", 'CHATBOT_BACKEND_SOCKET_PATH', '"/socket.io"'

            buildConfigField "String", 'SDK_API_BASE_URL', '"http://127.0.0.1:8000"'
            buildConfigField "String", 'XMPP_HOST', '"127.0.0.1"'
            buildConfigField "int", 'XMPP_PORT', '5222'
            buildConfigField "String", 'XMPP_DOMAIN', '"localhost"'
            buildConfigField "String", 'XMPP_MULTI_CHAT_SUBDOMAIN', '"conference"'
        }

//        debugDevelopment {
//            buildConfigField "String", 'CONVERSA_API_BASE_URL', '"https://conversa-dev-93wirujo.prosa.ai/api/dev/"'
//            buildConfigField "String", 'CHATBOT_BACKEND_HOST', '"https://conversa-dev-93wirujo.prosa.ai"'
//            buildConfigField "String", 'CHATBOT_BACKEND_SOCKET_PATH', '"/api-socket/dev/socket.io"'
//
//            buildConfigField "String", 'SDK_API_BASE_URL', '"https://blue-bird-dev.prosa.ai/dev/sdk/"'
//            buildConfigField "String", 'XMPP_HOST', '"34.101.69.15"'
//            buildConfigField "int", 'XMPP_PORT', '5222'
//            buildConfigField "String", 'XMPP_DOMAIN', '"localhost"'
//            buildConfigField "String", 'XMPP_MULTI_CHAT_SUBDOMAIN', '"conference"'
//
//            signingConfig signingConfigs.debug
//            debuggable true
//        }

        debugDevelopment {
            buildConfigField "String", 'CONVERSA_API_BASE_URL', '"https://conversa-stg.prosa.ai/api/bluebird-prosa/"'
            buildConfigField "String", 'CHATBOT_BACKEND_HOST', '"https://conversa-stg.prosa.ai"'
            buildConfigField "String", 'CHATBOT_BACKEND_SOCKET_PATH', '"/api-socket/bluebird-prosa/socket.io"'

            buildConfigField "String", 'SDK_API_BASE_URL', '"https://blue-bird-dev.prosa.ai/dev/sdk/"'
            buildConfigField "String", 'XMPP_HOST', '"xmpp-client-dev.blue-bird-dev.prosa.ai"'
            buildConfigField "int", 'XMPP_PORT', '5222'
            buildConfigField "String", 'XMPP_DOMAIN', '"blue-bird-dev.prosa.ai"'
            buildConfigField "String", 'XMPP_MULTI_CHAT_SUBDOMAIN', '"conference"'

            signingConfig signingConfigs.debug
            debuggable true
        }

        debugStaging {
            buildConfigField "String", 'CONVERSA_API_BASE_URL', '"https://conversa-stg.prosa.ai/api/bluebird-prosa/"'
            buildConfigField "String", 'CHATBOT_BACKEND_HOST', '"https://conversa-stg.prosa.ai"'
            buildConfigField "String", 'CHATBOT_BACKEND_SOCKET_PATH', '"/api-socket/bluebird-prosa/socket.io"'

            buildConfigField "String", 'SDK_API_BASE_URL', '"https://blue-bird-dev.prosa.ai/staging/sdk/"'
            buildConfigField "String", 'XMPP_HOST', '"34.101.69.15"'
            buildConfigField "int", 'XMPP_PORT', '5223'
            buildConfigField "String", 'XMPP_DOMAIN', '"localhost"'
            buildConfigField "String", 'XMPP_MULTI_CHAT_SUBDOMAIN', '"conference"'

            signingConfig signingConfigs.debug
            debuggable true
        }

        debugTenang {
            buildConfigField "String", 'CONVERSA_API_BASE_URL', '"https://conversa-stg.prosa.ai/api/tenang/"'
            buildConfigField "String", 'CHATBOT_BACKEND_HOST', '"https://conversa-stg.prosa.ai"'
            buildConfigField "String", 'CHATBOT_BACKEND_SOCKET_PATH', '"/api-socket/tenang/socket.io"'

            buildConfigField "String", 'SDK_API_BASE_URL', '""'
            buildConfigField "String", 'XMPP_HOST', '""'
            buildConfigField "int", 'XMPP_PORT', '5223'
            buildConfigField "String", 'XMPP_DOMAIN', '""'
            buildConfigField "String", 'XMPP_MULTI_CHAT_SUBDOMAIN', '""'

            signingConfig signingConfigs.debug
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId "ai.prosa.conversa" // com.company.project
                artifactId "conversa" // my-component-library
                version "demo-0.8.8" // 1.0.0-SNAPSHOT
                artifact "$buildDir/outputs/aar/app-debugTenang.aar"

                // To include project dependencies
                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }

        repositories {
            maven {
                url "https://gitlab.com/api/v4/projects/27241398/packages/maven"
                credentials(HttpHeaderCredentials) {
                    name = "Deploy-Token"
                    value = "BuVAZZvWc4c9_Zz_sFX2"
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }
}


dependencies {
    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$rootProject.navigation")
    implementation("androidx.navigation:navigation-ui-ktx:$rootProject.navigation")

    // Material Design Component
    implementation "com.google.android.material:material:$rootProject.material"


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "com.google.android.material:material:$rootProject.material"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayout"

    implementation "androidx.annotation:annotation:$rootProject.annotation"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle"
    // Asking for permission
    implementation "androidx.activity:activity-ktx:$rootProject.activity"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragment"

    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Rest API
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"

    implementation "androidx.multidex:multidex:$rootProject.multidex"

    implementation ("org.igniterealtime.smack:smack-android-extensions:$rootProject.smack")
    implementation "org.igniterealtime.smack:smack-tcp:$rootProject.smack"

    // UUID
    implementation "com.benasher44:uuid:$rootProject.uuid"

    // Sound recorder
    implementation "com.github.squti:Android-Wave-Recorder:$rootProject.wav_recorder"

    // Image compressor
    implementation "id.zelory:compressor:$rootProject.compressor"
    implementation 'com.github.Shouheng88:compressor:1.6.0'


    // Chat UI using groupie
    implementation "com.xwray:groupie:$rootProject.groupie"
    implementation "com.xwray:groupie-databinding:$rootProject.groupie"
    implementation "com.xwray:groupie-kotlin-android-extensions:$rootProject.groupie"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glide"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glide"
    implementation "com.github.bumptech.glide:annotations:$rootProject.glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$rootProject.glide"


    // Room database management
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"


    // Socket
    implementation ("io.socket:socket.io-client:$rootProject.socket_io") {
        exclude group: 'org.json', module: 'json'
    }

    // JSON Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$rootProject.json"

    // File picker
    implementation 'com.github.hedzr:android-file-chooser:v1.2.0-final'
    implementation 'com.github.HBiSoft:PickiT:0.1.14'

    // Media caching
    implementation 'com.danikula:videocache:2.7.1'

    // Firebase
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:29.3.1')

    // When using the BoM, you don't specify versions in Firebase library dependencies

    // Declare the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Declare the dependencies for any other desired Firebase products
    // For example, declare the dependencies for Firebase Authentication and Cloud Firestore
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    implementation 'com.google.firebase:firebase-messaging:23.0.4'

}

configurations {
    all*.exclude group: 'xpp3', module: 'xpp3'
}